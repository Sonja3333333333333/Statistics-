import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from logic import Processor
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import plotly.express as px
import numpy as np

class GUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.processor = Processor()

        self.title("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ3")
        self.geometry("1300x800")  # –†–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞

        # –ü–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        self.button_frame = ttk.Frame(self)
        self.button_frame.pack(side="top", fill="x", pady=10)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –ø–∞–Ω–µ–ª—ñ
        self.btn1 = ttk.Button(self.button_frame, text="–¢–∞–±–ª–∏—Ü—è —É–º–æ–≤–Ω–∏—Ö —Å–µ—Ä–µ–¥–Ω—ñ—Ö", command=self.show_conditional_means_table)
        self.btn1.pack(side="left", padx=5)

        self.btn2 = ttk.Button(self.button_frame, text="–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–µ –ø–æ–ª–µ —Ç–∞ –µ–º–ø—ñ—Ä–∏—á–Ω–∞ –ª—ñ–Ω—ñ—è —Ä–µ–≥—Ä–µ—Å—ñ—ó", command=self.show_emperical_regresion_line)
        self.btn2.pack(side="left", padx=5)

        self.btn3 = ttk.Button(self.button_frame, text="–õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è", command=self.show_liner_regresion_line)
        self.btn3.pack(side="left", padx=5)

        self.btn4 = ttk.Button(self.button_frame, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å –ª—ñ–Ω—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ", command=self.check_liner_model_adequacy)
        self.btn4.pack(side="left", padx=5)

        self.btn5 = ttk.Button(self.button_frame, text="–û–±—á–∏—Å–ª–∏—Ç–∏ –≤–∏–±—ñ—Ä–∫–æ–≤–∏–π –ª—ñ–Ω—ñ–π–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –π–æ–≥–æ –∑–Ω–∞—á—É—â—ñ—Å—Ç—å", command=self.liner_correlation_analysis)
        self.btn5.pack(side="left", padx=5)

        self.button_frame2 = ttk.Frame(self)
        self.button_frame2.pack(side="top", fill="x", pady=5)

        self.btn6 = ttk.Button(self.button_frame2, text="–ü—Ä–∏–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä–∞–±–æ–ª—ñ—á–Ω—É –∫–æ—Ä–µ–ª—è—Ü—ñ—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ", command=self.parabolic_correlation_test)
        self.btn6.pack(side="left", padx=5)

        self.btn7 = ttk.Button(self.button_frame2, text="–ü—Ä–∏–ø—É—Å—Ç–∏—Ç–∏ –≥—ñ–ø–µ—Ä–±–æ–ª—ñ—á–Ω—É –∫–æ—Ä–µ–ª—è—Ü—ñ—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ", command=self.giperbolic_correlation_test)
        self.btn7.pack(side="left", padx=5)

        self.btn8 = ttk.Button(self.button_frame2, text="–ü—Ä–∏–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–æ–≤—É –∫–æ—Ä–µ–ª—è—Ü—ñ—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ", command=self.exponential_correlation_test)
        self.btn8.pack(side="left", padx=5)

        self.button_frame3 = ttk.Frame(self)
        self.button_frame3.pack(side="top", fill="x", pady=5)

        self.btn9 = ttk.Button(self.button_frame3, text="–ü—Ä–∏–ø—É—Å—Ç–∏—Ç–∏ –∫–æ—Ä–µ–Ω–µ–≤—É –∫–æ—Ä–µ–ª—è—Ü—ñ—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ", command=self.root_correlation_test)
        self.btn9.pack(side="left", padx=5)

        self.btn10 = ttk.Button(self.button_frame3, text="–ó–∞ –º–æ–¥–µ–ª–ª—é –∑ –Ω–∞–π–º–µ–Ω—à–æ—é –∑–∞–ª–∏—à–∫–æ–≤–æ—é –≤–∞—Ä—ñ–∞—Ü—ñ—î—é ùëÑùëú –æ–±—á–∏—Å–ª–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è y* –ø—Ä–∏ –∑–∞–¥–∞–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—ñ x*", command=self.show_forecasted_value)
        self.btn10.pack(side="left", padx=5)


          # –ú—ñ—Å—Ü–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.result_frame = ttk.Frame(self)
        self.result_frame.pack(side="top", fill="both", expand=True)

        self.result_text = tk.Text(self.result_frame, height=16, width=80, wrap=tk.WORD)
        self.result_text.pack(fill="both", padx=10, pady=10)
        # self.result_text.insert(tk.END, "–¢—É—Ç –±—É–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n")  # –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        self.result_text.tag_configure("header", font=("Helvetica", 12, "bold"))
        self.result_text.tag_configure("subheader", font=("Helvetica", 10, "bold"))


        # –ú—ñ—Å—Ü–µ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É (–±—É–¥–µ –¥–æ–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ)
        self.graph_frame = ttk.Frame(self)
        self.graph_frame.pack(side="top", fill="both", expand=True)

        # self.graph_placeholder = ttk.Label(self.graph_frame, text="–ì—Ä–∞—Ñ—ñ–∫ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç", anchor="center")
        # self.graph_placeholder.pack(fill="both", padx=10, pady=10)

    def show_conditional_means_table(self):
        data = self.processor.get_conditional_means_table()
        df = pd.DataFrame(list(data.items()), columns=["xi", "—É–º–æ–≤–Ω–µ —Å–µ—Ä–µ–¥–Ω—î"])

        self.result_text.delete(1.0, tk.END)  
        self.result_text.insert(tk.END, "–¢–∞–±–ª–∏—Ü—è —É–º–æ–≤–Ω–∏—Ö —Å–µ—Ä–µ–¥–Ω—ñ—Ö:\n", 'header')
        self.result_text.insert(tk.END, df.to_string(index=False))

    def show_emperical_regresion_line(self):
        conditional_means_dict = self.processor.get_conditional_means_table()

        # –°–æ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
        x_vals = sorted(conditional_means_dict.keys())
        y_vals = [conditional_means_dict[x] for x in x_vals]

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ñ—ñ–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.plot(x_vals, y_vals, marker='o', color='orange', label='–ï–º–ø—ñ—Ä–∏—á–Ω–∞ –ª—ñ–Ω—ñ—è —Ä–µ–≥—Ä–µ—Å—ñ—ó')
        ax.set_xlabel("X")
        ax.set_ylabel("–£–º–æ–≤–Ω–µ —Å–µ—Ä–µ–¥–Ω—î Y")
        ax.set_title("–ï–º–ø—ñ—Ä–∏—á–Ω–∞ –ª—ñ–Ω—ñ—è —Ä–µ–≥—Ä–µ—Å—ñ—ó")
        ax.grid(True)
        ax.legend()

        ax.set_facecolor("#f8f8f8")
        fig.tight_layout()

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≥—Ä–∞—Ñ—ñ–∫ (—è–∫—â–æ —î)
        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–æ Tkinter
        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()

        # –ü–∞–∫—É—î–º–æ canvas –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏, –æ–±–º–µ–∂—É—é—á–∏ –π–æ–≥–æ –≤–∏—Å–æ—Ç—É —Ç–∞ —à–∏—Ä–∏–Ω—É
        canvas.get_tk_widget().pack(fill=None, padx=10, pady=10)  # –î–æ–¥–∞—î–º–æ –ø–∞–¥—ñ–Ω–≥ –¥–ª—è –∞–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—ñ

    def show_liner_regresion_line(self):
        a,b = self.processor.find_coefficients_liner_regresion()

        x_values = list(self.processor.corerlation_table.columns)
        y_values = [a*x + b for x in x_values]

        self.result_text.delete(1.0, tk.END)  
        self.result_text.insert(tk.END, f"a = {round(a, 6)}\nb = {round(b, 6)}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ñ—ñ–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.plot(x_values, y_values, marker='o', color='orange', label='–ì—Ä–∞—Ñ—ñ–∫ –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó')
        ax.set_xlabel("X")
        ax.set_ylabel("y = ax + b")
        ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó")
        ax.grid(True)
        ax.legend()

        ax.set_facecolor("#f8f8f8")
        fig.tight_layout()

        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–æ Tkinter
        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()

        # –ü–∞–∫—É—î–º–æ canvas –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏, –æ–±–º–µ–∂—É—é—á–∏ –π–æ–≥–æ –≤–∏—Å–æ—Ç—É —Ç–∞ —à–∏—Ä–∏–Ω—É
        canvas.get_tk_widget().pack(fill=None, padx=10, pady=10)  # –î–æ–¥–∞—î–º–æ –ø–∞–¥—ñ–Ω–≥ –¥–ª—è –∞–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—ñ

    def show_forecasted_value(self):
        a, b = self.processor.find_coefficients_exponential_regresion()
        x_values = list(self.processor.corerlation_table.columns)
        x_range = np.linspace(min(x_values) - 1, max(x_values) + 1, 100)
        y_values = [b*a**x for x in x_range]

        self.result_text.delete(1.0, tk.END)  
        self.result_text.insert(tk.END, "–û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è y* –ø—Ä–∏ –∑–∞–¥–∞–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—ñ x*", "header")
        self.result_text.insert(tk.END, "\n–ú–æ–¥–µ–ª–ª—é –∑ –Ω–∞–π–º–µ–Ω—à–∏–º –∑–Ω–∞—á–µ–Ω—è–º –∑–∞–ª–∏—à–∫–æ–≤–æ—ó –≤–∞—Ä—ñ–∞—Ü—ñ—ó Qo —î –ø–æ–∫–∞–∑–Ω–∏–∫–æ–≤–∞ –º–æ–¥–µ–ª—å.\n")

        self.result_text.insert(tk.END, "\n–í–∏–±—ñ—Ä–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è x*: ", "subheader")
        self.result_text.insert(tk.END, ",".join(map(str, x_values)))

        def on_submit():
            try:
                x = float(entry.get())
                y = self.processor.get_forecasted_value(x)

                self.result_text.insert(tk.END, f"\n\n–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è x = {x}:\ny = {y:.3f}")

                window.destroy()

            except ValueError:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")


        window = tk.Toplevel()
        window.title("–ü—Ä–æ–≥–Ω–æ–∑ –∑–Ω–∞—á–µ–Ω–Ω—è")
        
        window.geometry("300x150")

        label = tk.Label(window, text="–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è x:")
        label.pack(pady=5)

        entry = tk.Entry(window)
        entry.pack(pady=5)

        submit_button = tk.Button(window, text="–û–±—á–∏—Å–ª–∏—Ç–∏", command=on_submit)
        submit_button.pack(pady=10)

        window.transient()  
        window.grab_set()   

        



    # ------------------------- F-—Ç–µ—Å—Ç –¥–ª—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–∏—Ö –∫–æ—Ä–µ–ª—è—Ü—ñ–π -----------------------   
    def ask_alpha_and_run(self, callback):
        def on_submit():
            try:
                alpha = float(entry.get())
                if not (0 < alpha < 1):
                    raise ValueError
                popup.destroy()
                callback(alpha)
            except ValueError:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è Œ± (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0.05)")

        popup = tk.Toplevel(self)
        popup.title("–í–≤–µ–¥–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ Œ±")
        popup.geometry("300x100")
        popup.grab_set()

        label = ttk.Label(popup, text="–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ Œ± (0 < Œ± < 1):")
        label.pack(pady=5)

        entry = ttk.Entry(popup)
        entry.insert(0, "0.05")
        entry.pack(pady=5)

        submit_btn = ttk.Button(popup, text="OK", command=on_submit)
        submit_btn.pack(pady=5)

    
    def parabolic_correlation_test(self):
        def run_test(alpha):
            a,b,c = self.processor.find_coefficients_parabolic_regresion()
            conditional_means = self.processor.get_conditional_means_table()

            x_values = list(self.processor.corerlation_table.columns)
            y_values = [a*x**2 + b*x + c for x in x_values]
            y_empirical = [conditional_means[x] for x in x_values]

            self.result_text.delete(1.0, tk.END)  
            self.result_text.insert(tk.END, "–ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä–∞–±–æ–ª—ñ—á–Ω–∏–π –≤–∏–≥–ª—è–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó", "header")
            self.result_text.insert(tk.END, "\n–¢–æ–±—Ç–æ, —â–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó –º–∞—î –≤–∏–≥–ª—è–¥ y = ax^2 + bx + c")
            self.result_text.insert(tk.END, f"\na = {round(a, 6)}\nb = {round(b, 6)}\nc = {round(c, 6)}")
            self.result_text.insert(tk.END, f"\n–†—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó: y = {round(a, 2)}x^2 + {round(b, 2)}x + {round(c, 2)}")

            fig, ax = plt.subplots(figsize=(6, 4))
            ax.plot(x_values, y_values, marker='o', color='orange', label='–ì—Ä–∞—Ñ—ñ–∫ –ø–∞—Ä–∞–±–æ–ª—ñ—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó')
            ax.scatter(x_values, y_empirical, color='green', label='–ï–º–ø—ñ—Ä–∏—á–Ω—ñ —É–º–æ–≤–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ')
            ax.set_xlabel("X")
            ax.set_ylabel("y = ax^2 + bx + c")
            ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ –ø–∞—Ä–∞–±–æ–ª—ñ—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó")
            ax.grid(True)
            ax.legend()

            ax.set_facecolor("#f8f8f8")
            fig.tight_layout()

            for widget in self.graph_frame.winfo_children():
                widget.destroy()

            canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
            canvas.draw()

            canvas.get_tk_widget().pack(fill=None, padx=10, pady=10) 

            self.result_text.insert(tk.END, f"\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—ñ –ø–æ–±—É–¥–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∑–∞ F-–∫—Ä–∏—Ç–µ—Ä—ñ—î–º", "header")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÄ (–Ω—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó –Ω–µ —î –∑–Ω–∞—á—É—â–æ—é")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÅ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó —î –∑–Ω–∞—á—É—â–æ—é.\n")

            Q, Qp, Qo, F_emperical, F_critical, is_accepted = self.processor.F_criteria_adequacy_test(type="parabolic", alpha=alpha)
            self.result_text.insert(tk.END, f"\nQ = {round(Q, 6)}\nQp = {round(Qp, 6)}\nQo = {round(Qo, 6)}")
            self.result_text.insert(tk.END, f"\n–ï–º–ø—ñ—Ä–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_emperical, 6)}")
            self.result_text.insert(tk.END, f"\n–ö—Ä–∏—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_critical, 6)}\n")

            if is_accepted:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ < F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –ø—Ä–∏–π–º–∞—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å –Ω–µ —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")
            else:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ > F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")

        self.ask_alpha_and_run(run_test)

    def giperbolic_correlation_test(self):
        def run_test(alpha):
            a,b = self.processor.find_coefficients_giperbolic_regresion()
            conditional_means = self.processor.get_conditional_means_table()

            x_values = list(self.processor.corerlation_table.columns)
            y_values = [(a/x )+ b for x in x_values]
            y_empirical = [conditional_means[x] for x in x_values]

            self.result_text.delete(1.0, tk.END)  
            self.result_text.insert(tk.END, "–ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –≥—ñ–ø–µ—Ä–±–æ–ª—ñ—á–Ω–∏–π –≤–∏–≥–ª—è–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó", "header")
            self.result_text.insert(tk.END, "\n–¢–æ–±—Ç–æ, —â–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó –º–∞—î –≤–∏–≥–ª—è–¥ y = a/x + b")
            self.result_text.insert(tk.END, f"\na = {round(a, 6)}\nb = {round(b, 6)}")
            self.result_text.insert(tk.END, f"\n–†—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó: y = {round(a, 2)}/x + {round(b, 2)}")

            fig, ax = plt.subplots(figsize=(6, 4))
            ax.plot(x_values, y_values, marker='o', color='orange', label='–ì—Ä–∞—Ñ—ñ–∫ –≥—ñ–ø–µ—Ä–±–æ–ª—ñ—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó')
            ax.scatter(x_values, y_empirical, color='green', label='–ï–º–ø—ñ—Ä–∏—á–Ω—ñ —É–º–æ–≤–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ')
            ax.set_xlabel("X")
            ax.set_ylabel("y = a/x + b")
            ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ –≥—ñ–ø–µ—Ä–±–æ–ª—ñ—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó")
            ax.grid(True)
            ax.legend()

            ax.set_facecolor("#f8f8f8")
            fig.tight_layout()

            for widget in self.graph_frame.winfo_children():
                widget.destroy()

            canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
            canvas.draw()

            canvas.get_tk_widget().pack(fill=None, padx=10, pady=10) 

            self.result_text.insert(tk.END, f"\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—ñ –ø–æ–±—É–¥–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∑–∞ F-–∫—Ä–∏—Ç–µ—Ä—ñ—î–º", "header")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÄ (–Ω—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó –Ω–µ —î –∑–Ω–∞—á—É—â–æ—é")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÅ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó —î –∑–Ω–∞—á—É—â–æ—é.\n")

            Q, Qp, Qo, F_emperical, F_critical, is_accepted = self.processor.F_criteria_adequacy_test(type="giperbolic", alpha=alpha)
            self.result_text.insert(tk.END, f"\nQ = {round(Q, 6)}\nQp = {round(Qp, 6)}\nQo = {round(Qo, 6)}")
            self.result_text.insert(tk.END, f"\n–ï–º–ø—ñ—Ä–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_emperical, 6)}")
            self.result_text.insert(tk.END, f"\n–ö—Ä–∏—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_critical, 6)}\n")

            if is_accepted:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ < F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –ø—Ä–∏–π–º–∞—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å –Ω–µ —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")
            else:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ > F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")

        self.ask_alpha_and_run(run_test)

    def exponential_correlation_test(self):
        def run_test(alpha):
            a,b = self.processor.find_coefficients_exponential_regresion()
            conditional_means = self.processor.get_conditional_means_table()

            x_values = list(self.processor.corerlation_table.columns)
            y_values = [b*a**x for x in x_values]
            y_empirical = [conditional_means[x] for x in x_values]

            self.result_text.delete(1.0, tk.END)  
            self.result_text.insert(tk.END, "–ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –ø–æ–∫–∞–∑–Ω–∏–∫–æ–≤–∏–π –≤–∏–≥–ª—è–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó", "header")
            self.result_text.insert(tk.END, "\n–¢–æ–±—Ç–æ, —â–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó –º–∞—î –≤–∏–≥–ª—è–¥ y = ba^x")
            self.result_text.insert(tk.END, f"\na = {round(a, 6)}\nb = {round(b, 6)}")
            self.result_text.insert(tk.END, f"\n–†—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó: y =  {round(b, 2)} * {round(a, 2)}^x")

            fig, ax = plt.subplots(figsize=(6, 4))
            ax.plot(x_values, y_values, marker='o', color='orange', label='–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–∫–∞–∑–Ω–∏–∫–æ–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó')
            ax.scatter(x_values, y_empirical, color='green', label='–ï–º–ø—ñ—Ä–∏—á–Ω—ñ —É–º–æ–≤–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ')
            ax.set_xlabel("X")
            ax.set_ylabel("y = ba^x")
            ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–∫–∞–∑–Ω–∏–∫–æ–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó")
            ax.grid(True)
            ax.legend()

            ax.set_facecolor("#f8f8f8")
            fig.tight_layout()

            for widget in self.graph_frame.winfo_children():
                widget.destroy()

            canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
            canvas.draw()

            canvas.get_tk_widget().pack(fill=None, padx=10, pady=10) 

            self.result_text.insert(tk.END, f"\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—ñ –ø–æ–±—É–¥–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∑–∞ F-–∫—Ä–∏—Ç–µ—Ä—ñ—î–º", "header")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÄ (–Ω—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó –Ω–µ —î –∑–Ω–∞—á—É—â–æ—é")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÅ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó —î –∑–Ω–∞—á—É—â–æ—é.\n")

            Q, Qp, Qo, F_emperical, F_critical, is_accepted = self.processor.F_criteria_adequacy_test(type="exponential", alpha=alpha)
            self.result_text.insert(tk.END, f"\nQ = {round(Q, 6)}\nQp = {round(Qp, 6)}\nQo = {round(Qo, 6)}")
            self.result_text.insert(tk.END, f"\n–ï–º–ø—ñ—Ä–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_emperical, 6)}")
            self.result_text.insert(tk.END, f"\n–ö—Ä–∏—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_critical, 6)}\n")

            if is_accepted:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ < F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –ø—Ä–∏–π–º–∞—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å –Ω–µ —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")
            else:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ > F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")

        self.ask_alpha_and_run(run_test)

    def root_correlation_test(self):
        def run_test(alpha):
            a,b = self.processor.find_coefficients_root_regresion()
            conditional_means = self.processor.get_conditional_means_table()

            x_values = list(self.processor.corerlation_table.columns)
            y_values = [a*np.sqrt(x) + b for x in x_values]
            y_empirical = [conditional_means[x] for x in x_values]

            self.result_text.delete(1.0, tk.END)  
            self.result_text.insert(tk.END, "–ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –≤–∏–≥–ª—è–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó", "header")
            self.result_text.insert(tk.END, "\n–¢–æ–±—Ç–æ, —â–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó –º–∞—î –≤–∏–≥–ª—è–¥ ùë¶ = ùëé‚àöùë• + ùëè ")
            self.result_text.insert(tk.END, f"\na = {round(a, 6)}\nb = {round(b, 6)}")
            self.result_text.insert(tk.END, f"\n–†—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∏–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó: y =  {round(b, 2)} * {round(a, 2)}^x")

            fig, ax = plt.subplots(figsize=(6, 4))
            ax.plot(x_values, y_values, marker='o', color='orange', label='–ì—Ä–∞—Ñ—ñ–∫ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó')
            ax.scatter(x_values, y_empirical, color='green', label='–ï–º–ø—ñ—Ä–∏—á–Ω—ñ —É–º–æ–≤–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ')
            ax.set_xlabel("X")
            ax.set_ylabel("y = a‚àöx + b")
            ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó")
            ax.grid(True)
            ax.legend()

            ax.set_facecolor("#f8f8f8")
            fig.tight_layout()

            for widget in self.graph_frame.winfo_children():
                widget.destroy()

            canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
            canvas.draw()

            canvas.get_tk_widget().pack(fill=None, padx=10, pady=10) 

            self.result_text.insert(tk.END, f"\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—ñ –ø–æ–±—É–¥–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∑–∞ F-–∫—Ä–∏—Ç–µ—Ä—ñ—î–º", "header")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÄ (–Ω—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó –Ω–µ —î –∑–Ω–∞—á—É—â–æ—é")
            self.result_text.insert(tk.END, f"\n–ù‚ÇÅ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—ñ—ó —î –∑–Ω–∞—á—É—â–æ—é.\n")

            Q, Qp, Qo, F_emperical, F_critical, is_accepted = self.processor.F_criteria_adequacy_test(type="root", alpha=alpha)
            self.result_text.insert(tk.END, f"\nQ = {round(Q, 6)}\nQp = {round(Qp, 6)}\nQo = {round(Qo, 6)}")
            self.result_text.insert(tk.END, f"\n–ï–º–ø—ñ—Ä–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_emperical, 6)}")
            self.result_text.insert(tk.END, f"\n–ö—Ä–∏—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ F: {round(F_critical, 6)}\n")

            if is_accepted:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ < F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –ø—Ä–∏–π–º–∞—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å –Ω–µ —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")
            else:
                self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ F_–µ–º–ø—ñ—Ä–∏—á–Ω–µ > F_–∫—Ä–∏—Ç–∏—á–Ω–µ, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
                self.result_text.insert(tk.END, f"\n–ú–æ–¥–µ–ª—å —î –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—é –ø—Ä–∏ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ {alpha}.")

        self.ask_alpha_and_run(run_test)


    # ------------------------------------------------------------------------------------------------------

    def check_liner_model_adequacy(self):
        Q, Qp, Qo = self.processor.get_variations()
        R2 = self.processor.calculate_determination_coefficient()
        self.result_text.delete(1.0, tk.END)  
        
        self.result_text.insert(tk.END, "–í–∞—Ä—ñ–∞—Ü—ñ–π–Ω–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª—ñ:")
        self.result_text.insert(tk.END, "\nQ = Qp + Qo")
        self.result_text.insert(tk.END, f"\n–ü—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞—à—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞—Ü—ñ–π:\nQ = {round(Q, 6)}\nQp = {round(Qp, 6)}\nQo = {round(Qo, 6)}")
        self.result_text.insert(tk.END, f"\n–ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {round(Q, 6)} ‚âà {round(Qp + Qo, 6)}")
        self.result_text.insert(tk.END, f"\n–†–æ–∑—Ä–∞—Ö—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó: R¬≤ ‚âà {round(R2, 6)}")
        self.result_text.insert(
            tk.END,
            "\n–û—Å–∫—ñ–ª—å–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó –Ω–∞–±–ª–∏–∂–µ–Ω–µ –¥–æ 1, "
            "—Ä–æ–±–∏–º–æ –≤–∏—Å–Ω–æ–≤–æ–∫, —â–æ –ª—ñ–Ω—ñ–π–Ω–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ—ó –¥–æ–±—Ä–µ –ø–æ—è—Å–Ω—é—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—ó –æ–∑–Ω–∞–∫–∏."
        )
        
            # === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ ===
        conditional_means = self.processor.get_conditional_means_table()
        a, b = self.processor.find_coefficients_liner_regresion()

        x_vals = sorted(conditional_means.keys())
        y_empirical = [conditional_means[x] for x in x_vals]
        y_theoretical = [a * x + b for x in x_vals]

        fig, ax = plt.subplots(figsize=(6, 4))
        ax.scatter(x_vals, y_empirical, color='green', label='–ï–º–ø—ñ—Ä–∏—á–Ω—ñ —É–º–æ–≤–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ')
        ax.plot(x_vals, y_theoretical, color='orange', label='–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ –ª—ñ–Ω—ñ—è —Ä–µ–≥—Ä–µ—Å—ñ—ó')
        ax.set_title("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ")
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.legend()
        ax.grid(True)

        ax.set_facecolor("#f8f8f8")
        fig.tight_layout()
        
        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–æ Tkinter
        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()

        # –ü–∞–∫—É—î–º–æ canvas –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏, –æ–±–º–µ–∂—É—é—á–∏ –π–æ–≥–æ –≤–∏—Å–æ—Ç—É —Ç–∞ —à–∏—Ä–∏–Ω—É
        canvas.get_tk_widget().pack(fill=None, padx=10, pady=10)  # –î–æ–¥–∞—î–º–æ –ø–∞–¥—ñ–Ω–≥ –¥–ª—è –∞–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—ñ

    def open_alpha_dialog(self):
        dialog = tk.Toplevel(self)
        dialog.title("–í–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ")
        dialog.geometry("300x150")
        dialog.grab_set()  # —Ä–æ–±–∏—Ç—å –≤—ñ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω–∏–º

        tk.Label(dialog, text="–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0.05):").pack(pady=10)

        alpha_var = tk.StringVar(value="0.05")
        entry = tk.Entry(dialog, textvariable=alpha_var)
        entry.pack()

        def submit_alpha():
            try:
                alpha = float(alpha_var.get())
                if not 0 < alpha < 1:
                    raise ValueError
            except ValueError:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –º—ñ–∂ 0 —Ç–∞ 1.")
                return

            dialog.destroy()
            self.run_significance_test(alpha)

        tk.Button(dialog, text="OK", command=submit_alpha).pack(pady=10)

    def run_significance_test(self, alpha):
        t_empirical, t_critical, if_accepted = self.processor.check_correlation_coefficient_statistical_significance(alpha)

        self.result_text.insert(tk.END, f"\n–û–±—Ä–∞–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ: {alpha}")
        self.result_text.insert(tk.END, f"\n–ï–º–ø—ñ—Ä–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ t: {round(t_empirical, 6)}")
        self.result_text.insert(tk.END, f"\n–ö—Ä–∏—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ t: {round(t_critical, 6)}\n")

        if if_accepted:
            self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ |t_–µ–º–ø| ‚â§ t_–∫—Ä–∏—Ç, –Ω–µ–º–∞—î –ø—ñ–¥—Å—Ç–∞–≤ –≤—ñ–¥—Ö–∏–ª—è—Ç–∏ –Ω—É–ª—å–æ–≤—É –≥—ñ–ø–æ—Ç–µ–∑—É.")
            self.result_text.insert(tk.END, "\n–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –Ω–µ —î —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∏–º –Ω–∞ –æ–±—Ä–∞–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ.")
        else:
            self.result_text.insert(tk.END, "\n–û—Å–∫—ñ–ª—å–∫–∏ |t_–µ–º–ø| > t_–∫—Ä–∏—Ç, –Ω—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞ –≤—ñ–¥—Ö–∏–ª—è—î—Ç—å—Å—è.")
            self.result_text.insert(tk.END, "\n–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó —î —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –∑–Ω–∞—á—É—â–∏–º, —Ç–æ–±—Ç–æ –∑–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ –∑–º—ñ–Ω–Ω–∏–º–∏ —ñ—Å–Ω—É—î –Ω–∞ —Ä—ñ–≤–Ω—ñ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ.")


    def liner_correlation_analysis(self):
        r = self.processor.calculate_sample_linear_correlation_coefficient()

        self.result_text.delete(1.0, tk.END)  
        self.result_text.insert(tk.END, "–†–∞—Ö—É—î–º–æ –≤–∏–±—ñ—Ä–∫–æ–≤–∏–π –ª—ñ–Ω—ñ–π–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó", "header")
        self.result_text.insert(tk.END, f"\nr = {round(r, 6)}")
        self.result_text.insert(tk.END, "\n–ê–±—Å–æ–ª—é—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –≤–∫–∞–∑—É—î –Ω–∞ —Å–∏–ª—É –∑–≤'—è–∑–∫—É, –∞ –∑–Ω–∞–∫ –Ω–∞ –π–æ–≥–æ –Ω–∞–ø—Ä—è–º.")
        self.result_text.insert(tk.END, "\n–£ –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –º—ñ–∂ –∑–º—ñ–Ω–Ω–∏–º–∏ —î –¥—É–∂–µ —Å–∏–ª—å–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π) –ª—ñ–Ω—ñ–π–Ω–∏–π –∑–≤'—è–∑–æ–∫: –∫–æ–ª–∏ –æ–¥–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è, —ñ–Ω—à–∞, –π–º–æ–≤—ñ—Ä–Ω–æ, –∑–º–µ–Ω—à—É—î—Ç—å—Å—è.\n")

        t_emperical, t_critical, if_accepted = self.processor.check_correlation_coefficient_statistical_significance(alpha=0.05)
        self.result_text.insert(tk.END, "\n–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—É –∑–Ω–∞—á—É—â—ñ—Å—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞", 'header')
        self.result_text.insert(tk.END, "\n–ù‚ÇÄ (–Ω—É–ª—å–æ–≤–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): œÅ=0 (—É –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ñ–π —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ –Ω–µ–º–∞—î –ª—ñ–Ω—ñ–π–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ).")
        self.result_text.insert(tk.END, "\n–ù‚ÇÅ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞): œÅ‚â†0 (–ª—ñ–Ω—ñ–π–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —î)\n")
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É alpha
        self.open_alpha_dialog()

    


        


    def run(self):
        self.mainloop()
